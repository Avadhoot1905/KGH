generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  providerAccountId String
  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  contact        String?
  role           Role       @default(NORMAL_USER)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  phoneNumber    String?
  accounts       Account[]
  cartItems      Cart[]
  sessions       Session[]
  wishlistItems  Wishlist[]
  reviews        Review[]
  viewedProducts Product[]  @relation("ViewedBy")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id              String      @id @default(cuid())
  name            String
  price           Float
  description     String
  quantity        Int
  licenseRequired Boolean     @default(false)
  tag             ProductTag?
  addedAt         DateTime?   @default(now())
  removedAt       DateTime?
  categoryId      String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  averageRating   Float?      @default(0)
  brandId         String
  caliberId       String
  totalRating     Int         @default(0)
  totalReviews    Int         @default(0)
  typeId          String
  cartItems       Cart[]
  photos          Photo[]
  brand           Brand       @relation(fields: [brandId], references: [id])
  caliber         Caliber     @relation(fields: [caliberId], references: [id])
  category        Category    @relation(fields: [categoryId], references: [id])
  type            Type        @relation(fields: [typeId], references: [id])
  wishlistItems   Wishlist[]
  reviews         Review[]
  viewedBy        User[]      @relation("ViewedBy")
}

model Cart {
  id        String    @id @default(cuid())
  userId    String
  productId String
  quantity  Int       @default(1)
  addedAt   DateTime  @default(now())
  removedAt DateTime?
  product   Product   @relation(fields: [productId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  addedAt   DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Brand {
  id        String    @id @default(cuid())
  name      String    @unique
  logo      String?
  website   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Photo {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  isPrimary Boolean  @default(false)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Type {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Caliber {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  comment    String?
  isVerified Boolean  @default(false)
  userId     String
  productId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

enum Role {
  ADMIN
  NORMAL_USER
}

enum ProductTag {
  NEW
  TOP_SELLER
}
