generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // can be changed to postgres/mysql later
  url = env("DATABASE_URL")
  }

// -------------------------
// ENUMS
// -------------------------

enum Role {
  ADMIN
  NORMAL_USER
}

enum ProductTag {
  NEW
  TOP_SELLER
}

// -------------------------
// NEXTAUTH MODELS (v4 compatible)
// -------------------------

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  contact       String?
  role          Role      @default(NORMAL_USER)
  phoneNumber   String?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]

  // Ecommerce relations
  viewedProducts Product[] @relation("ViewedBy")
  cartItems      Cart[]
  wishlistItems  Wishlist[]
  reviews        Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// -------------------------
// E-COMMERCE MODELS
// -------------------------

model Product {
  id              String       @id @default(cuid())
  name            String
  price           Float
  description     String
  quantity        Int
  licenseRequired Boolean      @default(false)
  tag             ProductTag?
  averageRating   Float?       @default(0) // Average rating out of 5
  totalRating     Int          @default(0) // Sum of all ratings
  totalReviews    Int          @default(0) // Count of all reviews

  // Audit fields
  addedAt         DateTime?    @default(now())
  removedAt       DateTime?

  // Relations
  categoryId      String
  category        Category     @relation(fields: [categoryId], references: [id])
  brandId         String
  brand           Brand        @relation(fields: [brandId], references: [id])
  typeId          String
  type            Type         @relation(fields: [typeId], references: [id])
  caliberId       String
  caliber         Caliber      @relation(fields: [caliberId], references: [id])
  photos          Photo[]

  viewedBy        User[]       @relation("ViewedBy")
  cartItems       Cart[]
  wishlistItems   Wishlist[]
  reviews         Review[]

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Cart {
  id         String   @id @default(cuid())
  userId     String
  productId  String
  quantity   Int       @default(1)
  addedAt    DateTime  @default(now())
  removedAt  DateTime?

  user       User     @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model Wishlist {
  id         String   @id @default(cuid())
  userId     String
  productId  String

  user       User     @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  addedAt    DateTime @default(now())
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// -------------------------
// NEW ADDITIONAL MODELS
// -------------------------

model Brand {
  id        String    @id @default(cuid())
  name      String    @unique
  logo      String?   // URL to brand logo
  website   String?   // Brand website URL
  products  Product[]
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Photo {
  id        String   @id @default(cuid())
  url       String   // URL to the photo
  alt       String?  // Alt text for accessibility
  isPrimary Boolean  @default(false) // Whether this is the primary product image
  
  // Relations
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Type {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  products    Product[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Caliber {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  products    Product[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id          String   @id @default(cuid())
  rating      Int      // 1-5 star rating
  comment     String?  // Optional review comment
  isVerified  Boolean  @default(false) // Whether the review is from a verified purchase
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([userId, productId]) // One review per user per product
  @@map("reviews") // Explicit table name
}