generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // can be changed to postgres/mysql later
  url = env("DATABASE_URL")
  }

// -------------------------
// ENUMS
// -------------------------

enum Role {
  ADMIN
  NORMAL_USER
}

enum ProductTag {
  NEW
  TOP_SELLER
}

// -------------------------
// NEXTAUTH MODELS
// -------------------------

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  contact       String?
  role          Role      @default(NORMAL_USER)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]

  // Ecommerce relations
  viewedProducts Product[] @relation("ViewedBy")
  cartItems      Cart[]
  wishlistItems  Wishlist[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// -------------------------
// E-COMMERCE MODELS
// -------------------------

model Product {
  id              String       @id @default(cuid())
  name            String
  price           Float
  description     String
  quantity        Int
  licenseRequired Boolean      @default(false)
  tag             ProductTag?

  // Audit fields
  addedAt         DateTime?    @default(now())
  removedAt       DateTime?

  // Relations
  categoryId      String
  category        Category     @relation(fields: [categoryId], references: [id])

  viewedBy        User[]       @relation("ViewedBy")
  cartItems       Cart[]
  wishlistItems   Wishlist[]

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Cart {
  id         String   @id @default(cuid())
  userId     String
  productId  String
  quantity   Int       @default(1)
  addedAt    DateTime  @default(now())
  removedAt  DateTime?

  user       User     @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model Wishlist {
  id         String   @id @default(cuid())
  userId     String
  productId  String

  user       User     @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  addedAt    DateTime @default(now())
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}